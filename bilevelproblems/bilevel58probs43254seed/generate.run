reset;

option randseed 43254;

model generate.mod;
data generate.dat;

problem LPrelax: x, w, y, ytilde, bilevelobj, bcon, gcon,
          def_ytilde, KKTgrad;

#
#  the LPCC, although it appears cplex can't handle the
#  AMPL syntax "complements"
#
problem LPCC: x, w, y, ytilde, bilevelobj, bcon,
          comp_constraint_y, comp_constraint_v,
          def_ytilde, KKTgrad;

#problem quadrelax: x, w, y, ytilde, sigma, bilevelobj, bcon, gcon,
#          def_ytilde, KKTgrad, lifted, quadcon;

problem original: x, w, y, ytilde, bilevelobj, bcon, gcon,
          def_ytilde, KKTgrad, unlifted;

#solve quadrelax;

#display x,w,ytilde,sigma;
#display y;

solve LPrelax;

#display x,w,ytilde,sigma;
#display y;

# Set up problems of the form:
# 
# min  c^Tx + d^Tw
# st   Ax + Bw >= b
#      0 <= w <= u
#      x in argmin_x { 0.5 x^T Qx + w^Tx : Hx >= g, x >= 0}.
# 
# Equivalently:
# min  c^Tx + d^Tw
# st   Ax + Bw >= b
#      0 <= w <= u
#      Qx + w - H^Ty - v = 0
#      0 <= y \perp Hx - g >= 0.
#      0 <= v \perp x >= 0
#
# (
# Alternatively, could formulate equivalently as:
# min  c^Tx + d^Tw
# st   Ax + Bw >= b
#      0 <= w <= u
#      0 <= y \perp Hx - g >= 0.
#      0 <= x \perp Qx + w -H^Ty >= 0
#  )
#
#The output format has only inequalities.
#  We order the variables as x, w, y, v
#  We order the constraints as:
#     Ax + Bw >= b
#          w  >= 0
#         -w  >= -u
#     Qx +w -H^Ty -v >= 0
#    -Qx -w +H^Ty +v >= 0
# 
# Construct the instances in format_3.
# 
# The matrices are stored in a sparse manner:
# [[#rows,#cols,#nonzeroes],
# [0,#nonzeroes in row 1,#nonzeroes in rows 1 and 2,
# #nonzeroes in rows 1 and 2 and 3,...,
# #nonzeroes in rows 1..(#rows-1)],
# [#nonzeroes in row 1,#nonzeroes in row 2,
# #nonzeroes in row 3,...,
# #nonzeroes in row (#rows-1),#nonzeroes in last row],
# [(column of each nonzero) - 1],
# [the nonzeroes]
# ]
#
# Take A, B, H dense to simplify the calculation of
# sparsity patterns.
#
# Use the QPnonconvex/bilevel problems as an initial template.
#
# Generate everything as uniform01.
#  Include nonnegativity constraints in the inner problem.
#  Any w with Bw >= b and 0<=w<=u will then be feasible.
#
# Take u=vector of ones.
#

#
#  write out the data
#
#For our problem format, the order of storage of the data
#is as follows, in 29 lines:
 
#line 1:
#[dim x + dim w, dim y + dim v, dim b + 4*dim w (for bounds on w and the
#gradient KKT condition for the inner problem)]
printf "[ %i, %i, %i ]\n",2*n,gdim+n,bdim+4*n > lpcc.txt;

#line 2:
#[coeffs of c and d]
printf "[" > lpcc.txt;
for {i in 1..n} {
  printf "%16.8e,",c[i] > lpcc.txt;
}
for {i in 1..n-1} {
  printf "%16.8e,",d[i] > lpcc.txt;
}
printf "%16.8e ]\n",d[n] > lpcc.txt;

#display c,d;

#line 3:
#[zeroes for the coeffs of y and v in objective function]
printf "[" > lpcc.txt;
for {i in 1..n+gdim-1} {
  printf " 0," > lpcc.txt;
}
printf " 0 ]\n" > lpcc.txt;

#line 4:
#[coeffs of b, n zeroes for lower bound on w, -components of u,
#2*n zeroes for the gradient KKT condition]
printf "[" > lpcc.txt;
for {i in 1..bdim} {
  printf "%16.8e,",b[i] > lpcc.txt;
}
for {i in 1..n} {
  printf " 0," > lpcc.txt;
}
for {i in 1..n} {
  printf "%16.8e,",-u[i] > lpcc.txt;
}
for {i in 1..2*n-1} {
  printf " 0," > lpcc.txt;
}
printf " 0 ]\n" > lpcc.txt;

#display b,u;

#line 5:
#[-components of g, plus the zeroes for the second set of compl conditions]
printf "[" > lpcc.txt;
for {i in 1..gdim} {
  printf "%16.8e,",-g[i] > lpcc.txt;
}
for {i in 1..n-1} {
  printf "0," > lpcc.txt;
}
printf "0 ]\n" > lpcc.txt;

#display g;

#lines 6-11:
#[(store the A,B, the I and -I for the bounds on w,
#and also the matrices Q and I for Qx+w-H^Ty-v=0 with both signs)
#[dim b + 4*dim w,dim x + dim w,
# #nonzeroes in A and B + 4*dim w plus 2*(#nonzeroes in Q)],
#[dim b + 4*dim w entries giving the cumulative sum of nonzeroes
#in the rows, with an extra 0 at the beginning, and no entry for
#the final row],
#[dim b + 4*dim w entries giving the numbers of nonzeroes in each row],
#[(column entry of each nonzero) - 1],
#[actual nonzero values]
#]
printf "[[ %i, %i, %i ],\n",bdim+4*n,2*n,2*n*bdim+4*n+2*n*n > lpcc.txt;

printf "[0," > lpcc.txt;
for {i in 1..bdim} {
  printf " %i,",2*i*n > lpcc.txt;
}
for {i in 1..2*n} {
  printf " %i,",2*bdim*n+i > lpcc.txt;
}
for {i in 1..n} {
  printf " %i,",2*bdim*n+2*n+(n+1)*i > lpcc.txt;
}
for {i in 1..n-2} {
  printf " %i,",2*bdim*n+2*n+(n+1)*n+(n+1)*i > lpcc.txt;
}
printf " %i ",2*bdim*n+2*n+(n+1)*n+(n+1)*(n-1) > lpcc.txt;
printf "],\n" > lpcc.txt;

printf "[" > lpcc.txt;
for {i in 1..bdim} {
  printf " %i,",2*n > lpcc.txt;
}
for {i in 1..2*n} {
  printf " %i,",1 > lpcc.txt;
}
for {i in 1..2*n-1} {
  printf " %i,",n+1 > lpcc.txt;
}
printf " %i ",n+1 > lpcc.txt;
printf "],\n" > lpcc.txt;

# columns of nonzeroes
printf "[" > lpcc.txt;
for {i in 1..bdim} {
 for {j in 0..2*n-1} {
  printf " %i,",j > lpcc.txt;
 }
}
for {i in 0..n-1} {
  printf " %i,",n+i > lpcc.txt;
}
for {i in 0..n-1} {
  printf " %i,",n+i > lpcc.txt;
}
for {i in 1..n} {
  for {j in 0..n-1} {
    printf " %i,",j > lpcc.txt;
  }
  printf " %i,",n+i-1 > lpcc.txt;
}
for {i in 1..n-1} {
  for {j in 0..n-1} {
    printf " %i,",j > lpcc.txt;
  }
  printf " %i,",n+i-1 > lpcc.txt;
}
  for {j in 0..n-1} {
    printf " %i,",j > lpcc.txt;
  }
  printf " %i",2*n-1 > lpcc.txt;
printf "],\n" > lpcc.txt;

# values of nonzeroes
printf "[" > lpcc.txt;
for {i in 1..bdim} {
 for {j in 1..n} {
  printf " %16.8e,",A[i,j] > lpcc.txt;
 }
 for {j in 1..n} {
  printf " %16.8e,",B[i,j] > lpcc.txt;
 }
}
for {i in 0..n-1} {
  printf " %i,",1 > lpcc.txt;
}
for {i in 0..n-1} {
  printf " %i,",-1 > lpcc.txt;
}
for {i in 1..n} {
  for {j in 1..n} {
    printf " %16.8e,",Q[i,j] > lpcc.txt;
  }
  printf " %i,",1 > lpcc.txt;
}
for {i in 1..n-1} {
  for {j in 1..n} {
    printf " %16.8e,",-Q[i,j] > lpcc.txt;
  }
  printf " %i,",-1 > lpcc.txt;
}
  for {j in 1..n} {
    printf " %16.8e,",-Q[n,j] > lpcc.txt;
  }
  printf " %i",-1 > lpcc.txt;
printf "]]\n" > lpcc.txt;

#display A,B,Q;

#lines 12-17:
#[(store the matrix of zeroes for the coefficients of y in the outer constraints
#and also H^T from the gradient condition,
#and also all the zeroes for v and the I from the gradient condition)
#[dim b + 4*dim w,dim y + dim v,twice #nonzeroes in H^T + 2*dim v],
#[dim b + 2*dim w + 1 zeroes, cumulative sums of nonzeroes in rows
#of H^T and I (twice, skipping the final row the second time)],
#[dim b + 2*dim w zeroes, #nonzeroes in each row of H^T and I],
#[(column of each nonzero in (H^T,I) - 1],
#[nonzeroes in (H^T,I)]
#]
printf "[[ %i, %i, %i ],\n",bdim+4*n,gdim+n,2*n*gdim+2*n > lpcc.txt;

printf "[0," > lpcc.txt;
for {i in 1..bdim+2*n} {
  printf " 0," > lpcc.txt;
}
for {i in 1..2*n-2} {
  printf " %i,",(gdim+1)*i > lpcc.txt;
}
printf " %i ",(2*n-1)*(gdim+1) > lpcc.txt;
printf "],\n" > lpcc.txt;

printf "[" > lpcc.txt;
for {i in 1..bdim+2*n} {
  printf " 0," > lpcc.txt;
}
for {i in 1..2*n-1} {
  printf " %i,",gdim+1 > lpcc.txt;
}
printf " %i ",gdim+1 > lpcc.txt;
printf "],\n" > lpcc.txt;

# columns of nonzeroes
printf "[" > lpcc.txt;
for {i in 1..n} {
 for {j in 0..gdim-1} {
  printf " %i,",j > lpcc.txt;
 }
 printf " %i,",gdim-1+i > lpcc.txt;
}
for {i in 1..n-1} {
 for {j in 0..gdim-1} {
  printf " %i,",j > lpcc.txt;
 }
 printf " %i,",gdim-1+i > lpcc.txt;
}
 for {j in 0..gdim-1} {
  printf " %i,",j > lpcc.txt;
 }
 printf " %i",gdim-1+n > lpcc.txt;
printf "],\n" > lpcc.txt;

# values of nonzeroes
printf "[" > lpcc.txt;
for {i in 1..n} {
  for {j in 1..gdim} {
    printf " %16.8e,",-H[j,i] > lpcc.txt;
  }
  printf " -1," > lpcc.txt;
}
for {i in 1..n-1} {
  for {j in 1..gdim} {
    printf " %16.8e,",H[j,i] > lpcc.txt;
  }
  printf " 1," > lpcc.txt;
}
  for {j in 1..gdim} {
    printf " %16.8e,",H[j,n] > lpcc.txt;
  }
  printf " 1" > lpcc.txt;
printf "]]\n" > lpcc.txt;

#display H;

#lines 18-23:
#[(store (H,0) and (I,0) for the coefficients of (x,w) in the
#complementarity constraints)
#[dim y + dim v,dim x + dim w,dim x + #nonzeroes in H],
#[0, cumulative sums of nonzeroes in rows of H and I (skipping the final row)],
#[#nonzeroes in each row of H then I],
#[(column of each nonzero in H then I) - 1],
#[nonzeroes in H then I]
#]
printf "[[ %i, %i, %i ],\n",gdim+n,2*n,n+n*gdim > lpcc.txt;

printf "[0," > lpcc.txt;
for {i in 1..gdim} {
  printf " %i,",n*i > lpcc.txt;
}
for {i in 1..n-2} {
  printf " %i,",n*gdim+i > lpcc.txt;
}
printf " %i ",(gdim+1)*n-1 > lpcc.txt;
printf "],\n" > lpcc.txt;

printf "[" > lpcc.txt;
for {i in 1..gdim} {
  printf " %i,",n > lpcc.txt;
}
for {i in 1..n-1} {
  printf " 1," > lpcc.txt;
}
printf " 1" > lpcc.txt;
printf "],\n" > lpcc.txt;

# columns of nonzeroes
printf "[" > lpcc.txt;
for {i in 1..gdim} {
 for {j in 0..n-1} {
  printf " %i,",j > lpcc.txt;
 }
}
for {j in 0..n-2} {
  printf " %i,",j > lpcc.txt;
}
printf " %i",n-1 > lpcc.txt;
printf "],\n" > lpcc.txt;

# values of nonzeroes
printf "[" > lpcc.txt;
for {i in 1..gdim} {
  for {j in 1..n} {
    printf " %16.8e,",H[i,j] > lpcc.txt;
  }
}
for {j in 1..n-1} {
  printf " 1," > lpcc.txt;
}
printf " 1" > lpcc.txt;
printf "]]\n" > lpcc.txt;

#lines 24-29:
#[(store a matrix of zeroes for the coefficients of y and v on the
#right hand side of the complementarity constraints;
#store the zero in position (gdim+n,gdim+n) explicitly)
#[dim y + dim v,dim y + dim v,1],
#[dim y + dim v zeroes],
#[dim y + dim v -1 zeroes,1],
#[dim y + dim v -1],
#[0]
#]
printf "[[ %i, %i, %i ],\n",gdim+n,gdim+n,1 > lpcc.txt;

printf "[0," > lpcc.txt;
for {i in 1..gdim+n-2} {
  printf " 0," > lpcc.txt;
}
printf " 0],\n" > lpcc.txt;

printf "[" > lpcc.txt;
for {i in 1..n+gdim-1} {
  printf " 0," > lpcc.txt;
}
printf " 1],\n" > lpcc.txt;

printf "[%i],\n",gdim+n-1 > lpcc.txt;
printf "[0]]\n" > lpcc.txt;

#
#  now solve the LPCC
#    note: it appears cplex doesn't handle the cmpl omplements syntax.
#

#solve LPCC;
