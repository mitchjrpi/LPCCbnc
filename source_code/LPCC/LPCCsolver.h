#ifndef _LPCCSOLVER_H
#define _LPCCSOLVER_H
int solveLPCC (PARAM parameter);
int LPCCSolver(const int param_n, 
			   const int param_m,
			   const int param_k,
			   double *c_coef,
			   double *d_coef,
			   double *b_coef,
			   double *q_coef,
			   MATRIX _matrix_A,
			   MATRIX _matrix_B,
			   MATRIX _matrix_M,
			   MATRIX _matrix_N,
			   PARAM parameter,
			   double **LPCC_soln,
			   int	*LPCC_stat,
			   double *LPCC_lb,
			   double *LPCC_ub);
int preprocess(CPXENVptr env, 
			   CPXLPptr rx_lp, 
			   CPXLPptr cg_lp,
			   MATRIX matrix_N,
			   MATRIX matrix_M,
			   double *q_coef,
			   const int param_n,
			   const int param_m, 
			   const int param_k, 
			   NODE **headnodeptr, 
			   double *init_lb, 
			   double *improve_lb,
			   double *ub, 
			   double *feasible_x, 
			   int *LPCC_precondition,
			   PARAM preprocess_param);
int conditionaltest(CPXENVptr env, 
					CPXLPptr rx_lp, 
					const int param_n,
					const int param_m, 
					const int param_k,
					const int violate_complementary_index, 
					int *fix_signal);
int select_branch_by_score(CPXENVptr env, 
						   CPXLPptr rx_lp, 	
						   STARTINFO *lp_start,								 
						   const int param_n,								 
						   const int param_m, 								 
						   const int param_k,	
						   int *branch_index,
						   BRANCHHIST *branch_hist,
						   NODE *activenode,
						   double *violation_1,
						   double *violation_2);
int branch_score(CPXENVptr env, 
				 CPXLPptr rx_lp, 
				 const int param_n,
				 const int param_m,
				 const int param_k,
				 const int violate_complementary_index,
				 const double violation_complementary_1, 
				 const double violation_complementary_2, 
				 double *coef_norm_1,
				 double *coef_norm_2,
				 double *reduce_norm_1,
				 double *reduce_norm_2,
				 double *parallelism_1,
				 double *parallelism_2);
int node_pre_process(CPXENVptr env, 
					 CPXLPptr rx_lp, 
					 const int param_n,
					 const int param_m, 
					 const int param_k, 
					 NODE *activenodeptr, 
					 double *ub, 				
					 int pre_rx_lp_condition,
					 int *pre_process_status);
int Branch_Select_bounded_1(CPXENVptr env,
							CPXLPptr rx_lp, 
							const int param_n,
							const int param_m, 
							const int param_k, 
							NODE activenode, 
							double *ub, 
							NODE ***branchnode_ptr, 
							int **branch_indicator_p,
							double cutofflevel);
int Branch_Select_bounded_2(CPXENVptr env,
							CPXLPptr rx_lp, 
							const int param_n,
							const int param_m, 
							const int param_k, 
							NODE activenode, 
							double *ub, 
							NODE ***branchnode_ptr, 
							int **branch_indicator_p,
							BRANCHHIST *branch_hist);
int Branch_Select_unbounded(CPXENVptr env, 
							CPXLPptr rx_lp, 
							const int param_n,
							const int param_m, 
							const int param_k,
							NODE activenode, 
							double *ub, 
							const int fix_count, 
							const int nodes_count,
							int *unbounded_stat,
							double *feasible_ray, 
							NODE ***branchnode_ptr, 
							int **branch_indicator_p);
int LPCCSolver_bounded(CPXENVptr env,
					   CPXLPptr rx_lp,
					   const int param_n,
					   const int param_m, 
					   const int param_k,
					   NODE **headnodeptr, 
					   double *lb,
					   double *ub,
					   double *feasible_x, 
					   int *LPCC_stat,
					   PARAM parameter,
					   double *used_time);
int LPCCSolver_unbounded(CPXENVptr env, 
						 CPXLPptr rx_lp, 
						 const int param_n,
						 const int param_m, 
						 const int param_k,
						 NODE **headnodeptr, 
						 double *lb,
						 double *ub,
						 double *feasible_x, 
						 int *LPCC_stat,
						 PARAM parameter,
						 double *used_time);
int LPCC_feasible_recover_by_rounding(CPXENVptr env, 
									  CPXLPptr rx_lp, 
									  STARTINFO rx_lp_start,
									  const int param_n,
									  const int param_m, 
									  const int param_k,
									  const int num_var,
									  NODE active_node, 
									  double *rounding_point,
									  double *recover_objval, 
									  double *recover_x, 
									  int *recover_solnstat);
int feasiblity_local_search(CPXENVptr env, 
							CPXLPptr rx_lp, 	
							STARTINFO rx_lp_start,								 
							const int param_n,								 
							const int param_m, 								 
							const int param_k,								 
							NODE active_node, 	
							const int initial_index,
							double *initial_pump_objective_coef,
							const double initial_gap,
							const int num_var,								 
							double *feasible_pump_objective_coef,
							int *local_search_stat,
							int control_param);

int LPCC_feasible_recovery(CPXENVptr env, 
						     CPXLPptr rx_lp, 	
						     STARTINFO rx_lp_start,								 
						     const int param_n,								 
						     const int param_m, 								 
						     const int param_k,								 
						     NODE active_node, 	
						     const double recovery_range_lb,
						     const double recovery_range_ub,
						     const int num_var,
						     double *initial_soln,								 
						     double *recover_objval, 
						     double *recover_soln,
						     int *recover_stat,
						     int control_param_1,
						     int control_param_2);
int readdata_format_1(char* fileDir, 
					  int *param_n_p,
					  int *param_m_p,
					  int *param_k_p, 
					  double **c_coef_p,
					  double **d_coef_p,
					  double **b_coef_p, 
					  double **q_coef_p,  
					  double ***matrix_A_p,
					  double ***matrix_B_p, 
					  double ***matrix_N_p,
					  double ***matrix_M_p);
int readdata_format_2(char* file, 
					  int *param_n_p,
					  int *param_m_p,
					  int *param_k_p, 
					  double **c_coef_p,
					  double **d_coef_p,
					  double **b_coef_p, 
					  double **q_coef_p,  
					  double ***matrix_A_p,
					  double ***matrix_B_p, 
					  double ***matrix_N_p,
					  double ***matrix_M_p);
int readdata_format_3(char* file, 
					  int *param_n_p,
					  int *param_m_p,
					  int *param_k_p, 
					  double **c_coef_p,
					  double **d_coef_p,
					  double **b_coef_p, 
					  double **q_coef_p,  
					  MATRIX *_matrix_A_p,
					  MATRIX *_matrix_B_p,
					  MATRIX *_matrix_N_p,
					  MATRIX *_matrix_M_p);
int convertMPS(char* file, 
			   int *param_n_p,
			   int *param_m_p,
			   int *param_k_p, 
			   double **c_coef_p,
			   double **d_coef_p,
			   double **b_coef_p, 
			   double **q_coef_p,  
			   double ***matrix_A_p,
			   double ***matrix_B_p, 
			   double ***matrix_N_p,
			   double ***matrix_M_p);
int solve_branch_select_lp(CPXENVptr env, 							 
						   const int param_n,								 
						   const int param_m, 								 
						   const int param_k,
						   const int num_var,
						   const int violation_cnt,
						   double *y_hat,
						   double *w_hat,
						   double **y_tableau,
						   double **w_tableau,
						   int *cstat,
						   int *select_index);
int LPCC_feasible_recover_M_psd_fix_x(CPXENVptr env, 
										CPXLPptr rx_lp, 
										const int param_n,
										const int param_m, 
										const int param_k,
										const int num_var,
										MATRIX matrix_N, 
										MATRIX matrix_M, 
										double *q_coef,
										NODE active_node,
										double *x_soln,
										double *recover_objval, 
										double *recover_x, 
										int *recover_solnstat);
int LPCC_feasible_recover_M_psd_fix_y_bar(CPXENVptr env, 
										CPXLPptr rx_lp, 
										const int param_n,
										const int param_m, 
										const int param_k,
										const int num_var,
										MATRIX matrix_N, 
										MATRIX matrix_M, 
										double *q_coef,
										NODE active_node, 
										double *x_soln,
										double *recover_objval, 
										double *recover_x, 
										int *recover_solnstat);

int writeSolution(int LPCC_condition,
				  int param_n,	
				  int param_m,	
				  int param_k, 	
				  int solve_node,
				  PARAM preprocess_param,
				  double preprocessing_time,
				  double branching_time,
				  double proc_time_wall,
				  double solve_time_wall,
				  double lp_relaxation,
				  double improved_lb,
				  double best_lb,
				  double opt_obj,	
				  double *lpcc_soln);
int printResult(int LPCC_condition,
				int param_n,	
				int param_m,	
				int param_k, 	
				int solve_node,
				PARAM preprocess_param,
				double preprocessing_time,
				double branching_time,
				double proc_time_wall,
				double solve_time_wall,
				double lp_relaxation,
				double improved_lb,
				double best_lb,
				double opt_obj);

#endif

